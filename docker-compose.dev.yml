services:
  postgres: 
    image: postgres:latest
    env_file: .env
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: "unless-stopped"

  redis: 
    image: redis:latest
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: "unless-stopped"

  redis-init:
    image: redis:latest
    depends_on:
      redis:
        condition: service_healthy
    entrypoint: >
      sh -c "
        sleep 2 &&
        redis-cli -h redis XGROUP CREATE constant:website $REGION_ID 0 MKSTREAM || true
      "
    restart: "no"

  api: 
    build:
      context: .
      dockerfile: ./Dockerfile.dev
      args:
        - APP_NAME=api
        - GENERATE_DB=true
    command: sh -c "turbo run db:migrate && turbo run db:seed && turbo run dev"
    ports:
      - 5000:5000
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
    restart: "unless-stopped"
    develop:
      watch:
        - action: sync
          path: ./apps/api
          target: /app/apps/api
          ignore:
            - node_modules
            - .turbo
            - dist
        - action: sync
          path: ./packages
          target: /app/packages
          ignore:
            - node_modules
            - .turbo
            - dist 
            - redis
        - action: rebuild
          path: ./packages/database/prisma
        - action: rebuild
          path: ./apps/api/package.json
        - action: rebuild
          path: ./turbo.json

  pusher: 
    build:
      context: .
      dockerfile: ./Dockerfile.dev
      args:
        - APP_NAME=pusher
        - GENERATE_DB=true
    command: ["turbo", "run", "dev"]
    env_file: .env
    restart: "unless-stopped"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./apps/pusher
          target: /app/apps/pusher
          ignore:
            - node_modules
            - .turbo
            - dist
        - action: sync
          path: ./packages
          target: /app/packages
          ignore:
            - node_modules
            - .turbo
            - dist
        - action: rebuild
          path: ./apps/pusher/package.json
        - action: rebuild
          path: ./turbo.json

  worker: 
    build:
      context: .
      dockerfile: ./Dockerfile.dev
      args:
        - APP_NAME=worker
        - GENERATE_DB=true
    command: sh -c "turbo run db:migrate && turbo run db:seed && turbo run dev"
    restart: "unless-stopped"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file: .env
    develop:
      watch:
        - action: sync
          path: ./apps/worker
          target: /app/apps/worker
          ignore:
            - node_modules
            - .turbo
            - dist
        - action: sync
          path: ./packages
          target: /app/packages
          ignore:
            - node_modules
            - .turbo
            - dist
        - action: rebuild
          path: ./apps/worker/package.json
        - action: rebuild
          path: ./turbo.json

  web: 
    build: 
      context: .
      dockerfile: ./Dockerfile.dev
      args:
        - APP_NAME=web
        - GENERATE_DB=false
    env_file: .env
    ports:
      - 3000:3000
    restart: "unless-stopped"
    develop:
      watch:
        - action: sync
          path: ./apps/web
          target: /app/apps/web
          ignore:
            - node_modules
            - .next
            - .turbo
        - action: rebuild
          path: ./apps/web/package.json
        - action: rebuild
          path: ./turbo.json


volumes:
  postgres_data:
  redis_data:
 